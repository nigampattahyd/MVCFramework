//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRMHub.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CRMMasterClientsEntities : DbContext
    {
        public CRMMasterClientsEntities()
            : base("name=CRMMasterClientsEntities")
        {
        }
        public CRMMasterClientsEntities(string Connectionstring)
            : base("name=CRMMasterClientsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Custom_DbError> Custom_DbError { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<ExcelImportFile> ExcelImportFiles { get; set; }
        public virtual DbSet<ImportHistory> ImportHistories { get; set; }
    
        public virtual ObjectResult<string> USP_VALIDATE_CLIENT_EXPIRY_BY_TYPE(string cLIENTID, string sITE_TYPE)
        {
            var cLIENTIDParameter = cLIENTID != null ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(string));
    
            var sITE_TYPEParameter = sITE_TYPE != null ?
                new ObjectParameter("SITE_TYPE", sITE_TYPE) :
                new ObjectParameter("SITE_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_VALIDATE_CLIENT_EXPIRY_BY_TYPE", cLIENTIDParameter, sITE_TYPEParameter);
        }
    
        public virtual ObjectResult<VALIDATE_CLIENT_BY_TYPE_Result> VALIDATE_CLIENT_BY_TYPE(string cLIENTID, string sITE_TYPE)
        {
            var cLIENTIDParameter = cLIENTID != null ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(string));
    
            var sITE_TYPEParameter = sITE_TYPE != null ?
                new ObjectParameter("SITE_TYPE", sITE_TYPE) :
                new ObjectParameter("SITE_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VALIDATE_CLIENT_BY_TYPE_Result>("VALIDATE_CLIENT_BY_TYPE", cLIENTIDParameter, sITE_TYPEParameter);
        }
    
        public virtual ObjectResult<CRM_GetLogin_Result> CRM_GetLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CRM_GetLogin_Result>("CRM_GetLogin", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CRM_CheckifUserExists(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CRM_CheckifUserExists", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<CRM_Getclients_Result> CRM_Getclients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CRM_Getclients_Result>("CRM_Getclients");
        }
    
        public virtual int CRM_InsertClientDetails(string clientID, string clientName, string companytype, string country, string address1, string address2, string city, string companywebsite, byte[] connectionString, string serverName, string companyLogo)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var companytypeParameter = companytype != null ?
                new ObjectParameter("companytype", companytype) :
                new ObjectParameter("companytype", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var companywebsiteParameter = companywebsite != null ?
                new ObjectParameter("companywebsite", companywebsite) :
                new ObjectParameter("companywebsite", typeof(string));
    
            var connectionStringParameter = connectionString != null ?
                new ObjectParameter("ConnectionString", connectionString) :
                new ObjectParameter("ConnectionString", typeof(byte[]));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_InsertClientDetails", clientIDParameter, clientNameParameter, companytypeParameter, countryParameter, address1Parameter, address2Parameter, cityParameter, companywebsiteParameter, connectionStringParameter, serverNameParameter, companyLogoParameter);
        }
    
        public virtual int CRM_UpdateClientDetailsByClientId(string clientID, string clientName, string companytype, string country, string address1, string address2, string city, string companyLogo, string companywebsite)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var companytypeParameter = companytype != null ?
                new ObjectParameter("companytype", companytype) :
                new ObjectParameter("companytype", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(string));
    
            var companywebsiteParameter = companywebsite != null ?
                new ObjectParameter("companywebsite", companywebsite) :
                new ObjectParameter("companywebsite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_UpdateClientDetailsByClientId", clientIDParameter, clientNameParameter, companytypeParameter, countryParameter, address1Parameter, address2Parameter, cityParameter, companyLogoParameter, companywebsiteParameter);
        }
    
        public virtual int CRM_UpdateImportExcel(string fieldId, string status, string module)
        {
            var fieldIdParameter = fieldId != null ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_UpdateImportExcel", fieldIdParameter, statusParameter, moduleParameter);
        }
    
        public virtual ObjectResult<CRM_GetExcelfilesbasedonstatus_Result> CRM_GetExcelfilesbasedonstatus(string status, string module)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CRM_GetExcelfilesbasedonstatus_Result>("CRM_GetExcelfilesbasedonstatus", statusParameter, moduleParameter);
        }
    }
}
